1. 复杂数据类型 Object
ECMAScript中的对象其实就是一组数据(属性)和功能(方法)的集合。
1) 创建Object实例：
	1.使用构造函数创建，new Object()
		var person = new Object();
		person.name = "briup";
		person.age = 22;

	2.使用对象字面量表示法
		不同的属性之间用','分割，属性名和属性值之间用':'分割
		var person = {
			name : "briup",
			age : 22
		};
2) 访问对象属性
	1.点表示法，右侧必须是以属性名称命名的简单标识符
		person.name
	2.中括号表示法，中括号中必须是一个计算结果为字符串的表达式，可以通过变量访问属性，如果属性名中包含语法错误的字符，或者属性名使用的是关键字或保留字，可以使用中括号	person["first name"]
		var a = "name";
		person[a];	//既person["name"]
		person["first name"]
		
3) 删除属性
	delete只是断开了属性和宿主对象的联系，而不会操作属性中的属性，并且delete只会删除自有属性，不能删除继承属性。在销毁对象时，为了防止内存泄露，遍历对象中的属性，依次删除所有属性。
	 语法：delete 属性访问表达式
		例如：
	delete stu.name  //删除学生对象中的name属性

4) 检测属性
	in 检测某属性是否是某对象的自有属性或者是继承属性
	"toString" in student
	hasOwnProperty()检测给定的属性是否是对象的自有属性，对于继承属性将返回false
		var o = {
			x:1
		}
		o.hasOwnProperty("x");	//true, x 为o的自有属性
		o.hasOwnProperty("y");	//false,o 中不存在属性y
		o.hasOwnProperty("toString");	//toString为继承属性
	propertyIsEnumerable() 检测给定的属性是否是该对象的自有属性，并且该属性是可枚举的通常由JS代码创建的属性都是可枚举的，但是可以使用特殊的方法改变可枚举性。
		student.propertyIsEnumerable("toString")	//false 不可枚举

5) Object属性及方法
Object 类型所具有的任何属性和方法也同样存在于其他对象中，任何对象继承于Object对象
Object中常用的方法：
		hasOwnProperty(propertyName);	
			检查给定的属性名是否是对象的自有属性，
		toString();		
			返回对象的字符串表示
		valueOf();		
			返回对象的字符串，数值，布尔值的表示。
		propertyIsEnumerable(propertyName);	
			检查给定的属性在当前对象实例中是否存在
		constructor:			
			保存用户创建当前对象的函数
		isPrototypeOf(object);
			检查传入的对象是否是原型
		toLocaleString();	
			返回对象的字符串表示，该字符串与执行环境的地区对应
6) 对象序列化
	对象序列化是指将对象的状态转换为字符串，也可以反序列化，
	将字符串还原为对象函数，RegExp,Error对象，undefined值不能序列化和反序列化。
	JSON.stringify(obj)  
		将对象序列化为Json字符串,只能序列化对象可枚举的自有属性。
	JSON.parse(jsonStr)  
		反序列化


4. 函数（第一部分）
函数实际上是对象，每个函数都是Function类型的实例，具有属性和方法，函数名实际上是指向函数对象的指针。
1) 表示方法:
	1.函数声明
	function sum(a,b){
	      var  a  =10; 
	      function test(){
	        console.log(10);
	      }
		return a+b;
}
	2.函数表达式
	var sum = function(a,b){
			return a+b;
}
	解析器在向执行环境中加载数据时，会率先读取函数声明，并使其在执行任何代码之前可用；当执行器执行到函数表达式的代码的时候才会真正的解释执行


2) 函数的参数
	ECMAScript函数的参数与大多数其他语言中的函数的参数有所不同，ECMAScript函数不介意传递参数的个数以及参数类型，这是因为函数的参数在函数内容是使用一个类数组对象来表示的。这个类数组对象就是arguments

	 public  class test{
	   public  void test1(){}
	   publlc  void test1(int a){}
	 }

	 .js
	 
	 function test1(){
	 }
	 function test1(){
	   arguements :类数组对象
	   曾强for 
	 }
	 test1(10)
	 test1(10,20)


3) 函数的调用
	在JS中，函数没有重载的概念，两个函数的函数名相同即是同样一个函数，但是Java中不是

		函数名(实参列表)

2. 函数（第二部分）
1) 作为值的函数
	由于函数名本身就是变量，所以函数可以当做值来使用（参数，返回值）。
	function callOther(fun,args){
		return fun(args);
	}
	function show(msg){
		alert(msg);
	}
	callOther(show,"哈哈"); //show为参数


2) 作为返回值的函数
      function getMethod(){
			var add = function(a,b){
				alert(a+b);
			};
			//函数当做返回值返回
			return add;
		}
		
		var result = getMethod();
		console.log(result);
		//调用函数
		result(1,3);
3) 函数内部属性
	1. arguments :是类数组对象，包含着传入函数中参数，arguments对象还有一个callee的属性，用来指向拥有这个arguments对象的函数
		
		例如：
		num的阶乘，使用递归函数
		function factorial(num){
			if(num<=1){
				return 1;
			}else{
				//return num * factorial(num-1);
				return num * arguments.callee(num-1);
			}
		}
	2. this: 指向的是函数赖以执行的环境对象
	 var  person={
		   name:"张三",
		   test:function(){
		    console.log(this);
		    console.log(this.name);
		   }
        }
	person.test()


4) 函数的属性
length: 表示函数希望接受的命名参数的个数
	function say(msg){} //say.length 1 希望接受一个参数
	function add(m,n){} //add.length 2 希望接受两个参数
prototype: 保存实例方法的真正所在。在自定义引用数据类型以及继承时非常重要。
5) 函数的方法
	apply ： 参数（在其中运行函数的作用域，参数数组（Array,arguments））；
	call  ： 参数（在其中运行函数的作用域，参数列表）
这两个方法作用都是在特定的作用域中调用函数，实际上等于设置函数内部的this的值
	   var  person={
	   name:"张三",
	   test:function(a,b){
		 console.log(this);
		 console.log(this.name);
	   }
	}
	  var obj  ={
	  name:"lisi",
	  test:function(a,b){
	   console.log(this);
	   console.log(this.name);
	  }
	}
	person.test(10,20)	
	person.test.call(obj,10,20)
	person.test.apply(obj,[10,20])


3. 基本数据类型，引用数据类型
基本数据类型的变量：
	可以直接操作保存在变量中的实际的值
	参数传递的时候传递的是实际值
引用数据类型的变量：
	不能直接操作对象的内存空间，实际上是在操作对象的引用。
	可以为引用类型变量天极爱属性和方法，也可以改变和删除其属性和方法
	参数传递的时候传递的是引用地址。
值传递
	值的拷贝
引用传递
	引用地址的拷贝


